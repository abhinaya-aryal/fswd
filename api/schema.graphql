"""
Custom scalar type to handle Date values
"""
scalar GraphQLDate

"""
Enum representing the various statuses an issue can have
"""
enum StatusType {
  New
  Assigned
  Fixed
  Closed
}

"""
Represents an issue in the tracker
"""
type Issue {
  _id: ID!
  id: Int!
  title: String!
  status: StatusType!
  owner: String
  effort: Int
  created: GraphQLDate!
  due: GraphQLDate
  description: String
}

"""
Input type for adding new issues, excluding server-generated values
"""
input IssueInput {
  title: String!
  status: StatusType = New
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

"""
Inputs for issueUpdate: all are optional.
Whichever is specified will
be set to the given value, undefined fields will remain unmodified.
"""
input IssueUpdateInputs {
  title: String
  status: StatusType
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

"""
Root Query type for retrieving data
"""
type Query {
  about: String!
  issueList(status: StatusType, effortMin: Int, effortMax: Int): [Issue!]!
  issue(id: Int!): Issue!
}

"""
Root Mutation type for modifying data
"""
type Mutation {
  setAboutMessage(message: String!): String
  issueAdd(issue: IssueInput!): Issue!
  issueUpdate(id: Int!, changes: IssueUpdateInputs!): Issue!
  issueDelete(id: Int!): Boolean!
}
